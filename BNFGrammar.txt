*Approved by Svillen Ranev on Oct. 17 in CST8221-JAP Lab.*

Program Start

<program> ->
		PLATYPUS {<opt_statements>} 
<opt_statements> ->
		<statements> | E
		
2.1 Input Elements & Tokens

	<input> ->
		<input elements> SEOF
	
	<input elements> -> 
		<input element> | <input elements> <input element>
	
	<input element> ->
		<white space> | <comment> | <token>
		
	<token> ->
		<variable identifier> | <keyword> | <floating-point literal>
		| <integer literal> | <string literal> | <separator> | <operator>
	
2.2 WHITE SPACE

	<white space> ->
		 the ASCII SP character, also known as "space"
		|the ASCII HT character, also known as "horizontal tab"
		|the ASCII VT character, also known as "vertical tab"
		|the ASCII FF character, also known as "form feed"
		|<line terminator>
	
	<line terminator> ->
		CR | LF | CR LF
		
2.3 COMMENTS 
	
	<comment> -> 
		!< <opt_characters in line> <line terminator>
	
	<opt_characters in line> ->
		<characters in line> | E
	
	<characters in line> ->
		<comment characters> | <characters in line> <comment character>
		
	<comment character> -> 
		<input character> but not <line terminator>
		
2.4 VARIABLE IDENTIFIERS

	<variable identifier> -> 
		<arithmetic variable identifier> | <string variable identifier> but not <keywords>
	
	<arithmetic variable identifier> ->
		<letter> <opt_letters or digits>
	
	<letter or digits> ->
		<letter or digit> | <letter or digits> <letter or digit>
	
	<letter> -> one of
		a...z A...Z
		
	<digit> -> one of
		0...9
		
	<letter or digit> one of
		<letter>  <digit>
		
	<string variable identifier>
		<arithmetic variable identifier>#
		
2.5 KEYWORDS

	<keyword> ->
		PLATYPUS | IF | THEN | ELSE | USING | REPEAT | INPUT | OUTPUT 
		
2.6 INTEGER LITERALS

	<integer literal> ->
		<decimal integer literal> | <octal integer literal>
		
	<decimal integer literal> ->
		0 | <non zero digit> <opt_digits>
	
	<digits> ->
		<digit> | <digits> <digit>
		
	<digit> ->
		0 | <non zero digit>
		
	<non zero digit> one of
		1...9
		
	<octal integer literal> ->
		00 | <non zero octal digit> <opt_octal digits>
	
	<octal digit> -> one of
		0...7  
		
	<non zero octal digit> -> one of
		1...7
		
	<octal digits> ->
		<octal digit> | <octal digits> <octal digit>

2.7 Floating-point Literals

	<floating-point literal> ->
		<decimal integer literal>.<opt_digits>

2.8 String Literals

	<string literal> ->
		"<opt_string characters>"
		
	<string characters> ->
		<input character> | <string characters> <input characters>
		
2.9	Separators

	<separator> -> one of
		( )   { } , ; " .
	
2.10 Operators

	<operator> ->
		<arithmetic operator> | <string concatenation operator>|
		<relational operator> | <logical operator>| <assignment operators>
	
	<arithmetic operator> -> one of
		+  -  *  /
	
	<string concatenation operator> ->
			<>
		
	<relational operator> -> one of
		>  <  ==  !=
		
	<logical operator> -> 
		.AND. | .OR.
		
	<assignment operator> ->
		=
		
3.1 PLATYPUS PROGRAM

	<program> ->
		PLATYPUS {<opt_statements>} SEOF
		
	<statements> ->
		<statements> | <statement> <statements> 

3.2  STATEMENTS

	<statement> ->
		 <assignment statement>
		|<selection statement>
		|<iteration statement>
		|<input statement>
		|<output statement>
		
3.2.1 ASSIGNMENT STATEMENT
	
	<assignment statement> ->
		<assignment expression>;
	
	<assignment expression> ->
		AVID = <arithmetic expression> 
		| SVID = <string expression>
		
3.2.2 Selection Statement(if statement)

	<selection statement> ->
		IF (<conditional expression>) THEN <opt_statements>
		ELSE { <opt_statements> };
	
3.2.3 Iteration Statement(loop statement)

	<iteration statement> ->
		USING(<assignment expression>, <conditional expression>, <assignment expression>)
		REPEAT{ <opt_statements>};
		
3.2.4 Input Statement

	<input statement> ->
		INPUT (<variable list>);

	<variable list> ->
		<variable identifier>|<variable list>,<variable identifier>
	
3.2.5 Output Statement

	<output statement> ->
		OUTPUT (<opt_variable list>); | OUTPUT(<string literal>);
		
3.3.1 ARITHMETIC EXPRESSION

	<arithmetic expression> ->
		 <unary arithmetic expression>
		|<additive arithmetic expression>
		|<multiplicative arithmetic expression> 
		
	<unary arithmetic expression> ->
		 - <primary arithmetic expression>
		|+ <primary arithmetic expression>
		
	<additive arithmetic expression> ->
		 <additive arithmetic expression> + <multiplicative arithmetic expression>
		|<additive arithmetic expression> - <multiplicative arithmetic expression>
		|<multiplicative arithmetic expression>
		
	<multiplicative arithmetic expression> ->
		 <multiplicative arithmetic expression> * <primary arithmetic expression>
		|<multiplicative arithmetic expression> / <primary arithmetic expression>
		|<primary arithmetic expression>
		
	<primary arithmetic expression>
		 <arithmetic variable identifier>
		|<floating-point literal>
		|<integer literal>
		|(<arithmetic expression>)

3.3.2 String Expression

	<string expression> ->
		<primary string expression> | <string expression> <> <primary string expression>

	<primary string expression> ->
		<string variable identifier> | <string literal>
	
3.3.3 Conditional Expression

	<conditional expression> ->
		<logical OR expression> 
		
	<logical OR expression> ->
		 <logical OR expression> .OR. <logical AND expression>
		|<logical AND expression>

	<logical AND expression> ->
		<logical AND expression> .AND. <logical OR expression>
		|<relational expression>

3.3.4 Relational Expression

	<relational expression> ->
		<primary a_relational expression> == <primary a_relational expression>
		| <primary a_relational expression> != <primary a_relational expression>
		| <primary a_relational expression> > <primary a_relational expression>
		| <primary a_relational expression> < <primary a_relational expression>
		| <primary s_relational expression> == <primary s_relational expression>
		| <primary s_relational expression> != <primary s_relational expression>
		| <primary s_relational expression> > <primary s_relational expression>
		| <primary s_relational expression> < <primary s_relational expression>
		
	<primary a_relational expression> ->
		<floating-point literal>
		|<integer literal>
		|<octal literal>
		|<arithmetic variable identifier>
		
	<primary s_relational expression> ->
		 <string literal>
		|<string variable identifier>